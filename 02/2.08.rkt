#lang sicp

; Exercise 2.8
; ============
; Using reasoning analogous to Alyssaâ€™s, describe how the difference of two
; intervals may be computed. Define a corresponding subtraction procedure,
; called sub-interval.

(define (make-interval a b) (cons a b))
(define (upper-bound int) (cdr int))
(define (lower-bound int) (car int))

; We use the definition of subtraction:
;
;     A - B = A + (-B)
;     where -B = [-b, -a] if B = [a, b]
;
; In other words, [a, b] - [c, d] =  [a - d, c - b] since the biggest
; difference will be generated by the widest gap, which is between
; b (big-left) and c (small-right). The reasoning should be
; similar for a and d.

(define (display-interval int)
  (display "[")
  (display (lower-bound int))
  (display ", ")
  (display (upper-bound int))
  (display "]")
  (newline))

(define (add-interval x y)
  (make-interval (+ (lower-bound x)
                    (lower-bound y))
                 (+ (upper-bound x)
                    (upper-bound y))))

(define (neg-interval int)
  (make-interval (- (upper-bound int)) (- (lower-bound int))))

(define (sub-interval x y)
  (add-interval x (neg-interval y)))

(display-interval (sub-interval (make-interval 4 5) (make-interval 1 2)))
